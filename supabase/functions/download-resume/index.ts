import { serve } from "https://deno.land/std@0.168.0/http/server.ts"

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const { analysis } = await req.json()
    
    // Generate PDF report content (simplified HTML-to-PDF approach)
    const pdfContent = generateReportPDF(analysis)
    
    return new Response(pdfContent, {
      headers: {
        ...corsHeaders,
        'Content-Type': 'application/pdf',
        'Content-Disposition': 'attachment; filename="resume-optimization-report.pdf"'
      }
    })
  } catch (error) {
    return new Response(
      JSON.stringify({ error: error.message }),
      { 
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    )
  }
})

function generateReportPDF(analysis: any): Uint8Array {
  // For demo purposes, return a simple text-based "PDF"
  // In production, use a proper PDF generation library like jsPDF or Puppeteer
  
  const reportText = `
RESUME OPTIMIZATION REPORT
Generated by JobFit AI

MATCH SCORE: ${analysis.match_score}%

MISSING KEYWORDS:
${analysis.missing_keywords.map((kw: string) => `• ${kw}`).join('\n')}

ATS OPTIMIZATION SUGGESTIONS:
${analysis.ats_suggestions.map((suggestion: string) => `• ${suggestion}`).join('\n')}

IMPROVEMENT TIPS:
${analysis.improvement_tips.map((tip: string) => `• ${tip}`).join('\n')}

---
Report generated on ${new Date().toLocaleDateString()}
  `
  
  // Convert text to bytes (in production, generate actual PDF)
  return new TextEncoder().encode(reportText)
}